package com.dynamicg.bookmarkTree.ui.dragAndDrop;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.ListView;

import com.dynamicg.bookmarkTree.R;
import com.dynamicg.common.Logger;

// TODO scroll list when at top or at bottom

/*

05-29 23:09:33.287: ERROR/AndroidRuntime(735): java.lang.RuntimeException: Canvas: trying to use a recycled bitmap android.graphics.Bitmap@436543e0
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.graphics.Canvas.throwIfRecycled(Canvas.java:942)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.graphics.Canvas.drawBitmap(Canvas.java:1013)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.graphics.drawable.BitmapDrawable.draw(BitmapDrawable.java:250)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.widget.ImageView.onDraw(ImageView.java:824)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.view.View.draw(View.java:5838)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.view.ViewRoot.draw(ViewRoot.java:1237)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.view.ViewRoot.performTraversals(ViewRoot.java:1045)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.view.ViewRoot.handleMessage(ViewRoot.java:1504)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.os.Handler.dispatchMessage(Handler.java:99)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.os.Looper.loop(Looper.java:123)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at android.app.ActivityThread.main(ActivityThread.java:3948)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at java.lang.reflect.Method.invokeNative(Native Method)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at java.lang.reflect.Method.invoke(Method.java:521)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:782)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:540)
05-29 23:09:33.287: ERROR/AndroidRuntime(735):     at dalvik.system.NativeStart.main(Native Method)

 */
public class TouchInterceptorListView extends ListView {

	/*
	 * notes
	 *  getChildAt => pointToPosition corrected by "getFirstVisiblePosition()"
	 *  getItemAtPosition => pointToPosition
	 */
	
	private Object draggedListItem;
	
	private static final Logger log = new Logger(TouchInterceptorListView.class);

	public TouchInterceptorListView(Context context, AttributeSet attrs,
			int defStyle) {
		super(context, attrs, defStyle);
	}

	public TouchInterceptorListView(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	public TouchInterceptorListView(Context context) {
		super(context);
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		// init the drag action
		int action = ev.getAction();
		if (action==MotionEvent.ACTION_DOWN) {
			log.debug("onInterceptTouchEvent", "DOWN");

			int x = (int) ev.getX();
			int y = (int) ev.getY();

			int itemnum = pointToPosition(x, y) - getFirstVisiblePosition();
			log.debug("selected item", itemnum);
			ViewGroup selectedRow = (ViewGroup) getChildAt(itemnum);
			if (selectedRow==null) {
				return super.onInterceptTouchEvent(ev);
			}
			ImageView selectedIcon = (ImageView)selectedRow.findViewById(R.id.bmIcon);
			draggedListItem = getItemAtPosition(pointToPosition(x, y));

			int[] iconPosition = new int[2];
			selectedIcon.getLocationInWindow(iconPosition);
			int iconX = iconPosition[0];
			int iconY = iconPosition[1];

			if ( x>=iconX && x<=iconX+selectedIcon.getWidth()
					&& y>=iconY-selectedIcon.getHeight() && y<=iconY)
			{
				// icon is dragged
				setDraggingOn();
				log.debug("ICON SELECTED, dragInProgress=true");
				// Create a copy of the drawing cache so that it does not get recycled
				// by the framework when the list tries to clean up memory
				View dragItem = selectedIcon;
				dragItem.setDrawingCacheEnabled(true);
				Bitmap bitmap = Bitmap.createBitmap(dragItem.getDrawingCache());
				startDragging(bitmap, x, y);

			}
			else {
				log.debug("outside icon, no drag", selectedIcon.getWidth(), selectedIcon.getHeight() );
				log.debug("- X:",x,iconX);
				log.debug("- Y:",y,iconY);
			}


		}
		else if (action==MotionEvent.ACTION_CANCEL || action==MotionEvent.ACTION_UP) {
			stopDragging();
			log.debug("onInterceptTouchEvent", "CANCEL or UP");
		}

		return super.onInterceptTouchEvent(ev);
	}

	@Override
	public boolean onTouchEvent(MotionEvent ev) {
		// handle move and drop
		int action = ev.getAction();
		// log.debug("onTouchEvent", action);
		if (mDragView!=null) {
			if (action==MotionEvent.ACTION_MOVE) {
				int x = (int) ev.getX();
				int y = (int) ev.getY();
				dragView(x, y);
			}
			else if (action==MotionEvent.ACTION_UP) {
				log.debug("onTouchEvent", "ACTION_UP - DONE");
				stopDragging();
			}
			return true;
		}
		return super.onTouchEvent(ev);
	}

	private WindowManager mWindowManager;
	private Bitmap mDragBitmap;
	private WindowManager.LayoutParams mWindowParams;
	private ImageView mDragView;
	int mDragPoint=0, mCoordOffset=0;
	int xOffset = -160;
	
	private void startDragging(Bitmap bm, int x,int y) {
		log.debug("****************************************** startDragging", bm);

		mWindowParams = new WindowManager.LayoutParams();
		mWindowParams.gravity = Gravity.TOP;
		mWindowParams.x = 0;
		mWindowParams.x = x + xOffset;
		mWindowParams.y = y - mDragPoint + mCoordOffset;

		mWindowParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
		mWindowParams.width = WindowManager.LayoutParams.WRAP_CONTENT;
		mWindowParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
		| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
		| WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
		| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
		mWindowParams.format = PixelFormat.TRANSLUCENT;
		mWindowParams.windowAnimations = 0;

		ImageView v = new ImageView(getContext());
		//int backGroundColor = mContext.getResources().getColor(R.color.dragndrop_background);
		// int backGroundColor = Color.GRAY; // TODO
		//v.setBackgroundColor(backGroundColor);
		v.setImageBitmap(bm);

		if (mDragBitmap != null) {
			mDragBitmap.recycle();
		}
		mDragBitmap = bm;

		mWindowManager = (WindowManager)getContext().getSystemService("window");
		mWindowManager.addView(v, mWindowParams);
		mDragView = v;
	}

	private int previousViewPosition=-1;

	private void dragView(int x, int y) {
		// log.debug("****************************************** dragView", x, y);
		mWindowParams.y = y - mDragPoint + mCoordOffset;
		mWindowParams.x = x + xOffset;
		
		int viewPosition = pointToPosition(x, y) - getFirstVisiblePosition();
		if ( viewPosition>=0 && previousViewPosition!=viewPosition ) {
			
			rowHighlightOff();
			int itemPosition = pointToPosition(x, y);
			log.debug("###view/item position", viewPosition, itemPosition);
			
			Object dropTarget = getItemAtPosition(itemPosition);
			if (dropTarget instanceof DragAndDropItem && ((DragAndDropItem)dropTarget).isValidDropTarget(draggedListItem) ) {
				View view = super.getChildAt(viewPosition);
				rowHighlight(view);
			}
			previousViewPosition=viewPosition;
		}
		
		mWindowManager.updateViewLayout(mDragView, mWindowParams);
	}

	private void stopDragging() {
		log.debug("****************************************** stopDragging()");
		setDraggingOff();
		if (mDragView!=null) {
			WindowManager wm = (WindowManager)getContext().getSystemService("window");
			wm.removeView(mDragView);
			mDragView = null;
		}
		if (mDragBitmap != null) {
			mDragBitmap.recycle();
			mDragBitmap = null;
		}
		rowHighlightOff();
	}
	
	private View currentHighlightedRow;
	private void rowHighlight(View view) {
		rowHighlightOff();
		view.setBackgroundColor(Color.GREEN); // MARK
		currentHighlightedRow = view;
	}
	private void rowHighlightOff() {
		if (currentHighlightedRow!=null) {
			currentHighlightedRow.setBackgroundColor(Color.rgb(24,24,24));
			currentHighlightedRow = null;
		}
	}
	
	private boolean draggingInProgess;
	private boolean dragToIntercept;
	private void setDraggingOn() {
		draggingInProgess = true;
		dragToIntercept = true;
	}
	private void setDraggingOff() {
		draggingInProgess = false;
	}
	public boolean skipShortClick() {
		if (dragToIntercept) {
			dragToIntercept = false;
			return true;
		}
		return false;
	}
	public boolean skipLongClick() {
		return draggingInProgess;
	}
	
}
